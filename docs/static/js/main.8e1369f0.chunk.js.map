{"version":3,"sources":["components/Stocks.js","App.js","reducers/index.js","actions/getstock.js","serviceWorker.js","index.js"],"names":["Stocks","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","stock","getStocks","_this2","axios","get","then","response","data","_","map","console","log","setState","concat","toConsumableArray","title","catch","react_default","a","createElement","className","React","Component","store","createStore","items","arguments","length","undefined","action","type","applyMiddleware","thunk","App","es","react_router_dom","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8TAyCeA,cAlCb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,MAAO,IAETR,EAAKS,YALWT,2EAQP,IAAAU,EAAAP,KACTQ,IACGC,IAbK,+CAcLC,KAAK,SAACC,GACL,IAAMC,EAAOC,IAAEC,IAAIH,EAASC,MAC5BG,QAAQC,IAAIJ,GACZL,EAAKU,SAAS,CACZZ,MAAK,GAAAa,OAAApB,OAAAqB,EAAA,EAAArB,CAAOS,EAAKH,MAAMC,OAAlB,CAAyBO,EAAK,GAAGQ,YAGzCC,MAAM,WACLN,QAAQC,IAAI,6CAKlB,OACEM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASzB,KAAKI,MAAMC,MAAM,YA5B1BqB,IAAMC,0BCIrBC,EAAQC,YCPC,WAAwB,IAAvBC,EAAuBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAf,GAAIG,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACrC,OAAQC,EAAOC,MACb,ICH4B,mBDI1B,OAAOtB,IAAEC,IAAIoB,EAAOvB,UACtB,QACE,OAAOmB,IDEsBM,YAAgBC,MAmBpCC,MAjBf,WACE,OACEhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAUX,MAAOA,GACjBN,EAAAC,EAAAC,cAACgB,EAAA,EAAD,KACElB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAClBH,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWjD,IAC/B2B,EAAAC,EAAAC,cAAA,iBACOF,EAAAC,EAAAC,cAAA,0BADP,6BGPUqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/C,KAAK,SAAAgD,GACjCA,EAAaC","file":"static/js/main.8e1369f0.chunk.js","sourcesContent":["import React from 'react'\nimport axios from 'axios'\nimport _ from 'lodash'\n\nconst URL = 'https://qiita.com/api/v2/users/nskij/stocks'\n\nclass Stocks extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      stock: []\n    }\n    this.getStocks()\n  }\n\n  getStocks(){\n    axios\n      .get(URL)\n      .then((response) => {\n        const data = _.map(response.data)\n        console.log(data)\n        this.setState({\n          stock : [...this.state.stock, data[0].title]\n        })\n      } )\n      .catch(() => {\n        console.log('error!')\n      })\n  }\n\nrender(){\n  return(\n    <div className=\"stocks\">\n      <p>test</p>\n      <div className='title'>{this.state.stock[0]}</div>\n    </div>\n  )\n}\n\n}\n\nexport default Stocks","import React from 'react';\nimport { createStore, applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux'\nimport thunk from 'redux-thunk'\nimport reducer from './reducers'\n// import './App.css';\n\nimport Stocks from './components/Stocks';\nimport { Route, BrowserRouter } from 'react-router-dom' \n\nconst store = createStore(reducer, applyMiddleware(thunk))\n\nfunction App() {\n  return (\n    <Provider store={store}>\n    <BrowserRouter>\n      <div className=\"App\">\n        <header className=\"App-header\">\n        <Route exact path=\"/\" component={Stocks} />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n        </header>\n      </div>\n      </BrowserRouter>\n    </Provider>\n  );\n}\n\nexport default App;\n","import _ from 'lodash'\nimport { GET_QIITA_STOCKS } from '../actions/getstock'\n\nexport default (items = {}, action) => {\n  switch (action.type){\n    case GET_QIITA_STOCKS:\n      return _.map(action.response)\n    default: \n      return items\n  }\n}","import axios from 'axios'\n\nexport const GET_QIITA_STOCKS = 'GET_QIITA_STOCKS'\n\nconst URL = 'https://qiita.com/api/v2/users/nskij/stocks'\nconst user = 'nskij'\nconst stocks = 'stocks'\n\nexport const getQiitaStocks = () => async dispatch => {\n  const response = await axios.get(`${URL}/${user}/${stocks}`)\n  const data = response.data\n  console.log(response.data)\n  dispatch({type: GET_QIITA_STOCKS, data})\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}